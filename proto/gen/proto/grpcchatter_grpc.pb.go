// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.1
// source: proto/grpcchatter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GRPCChatter_Chat_FullMethodName = "/proto.GRPCChatter/Chat"
)

// GRPCChatterClient is the client API for GRPCChatter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCChatterClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (GRPCChatter_ChatClient, error)
}

type gRPCChatterClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCChatterClient(cc grpc.ClientConnInterface) GRPCChatterClient {
	return &gRPCChatterClient{cc}
}

func (c *gRPCChatterClient) Chat(ctx context.Context, opts ...grpc.CallOption) (GRPCChatter_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCChatter_ServiceDesc.Streams[0], GRPCChatter_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCChatterChatClient{stream}
	return x, nil
}

type GRPCChatter_ChatClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type gRPCChatterChatClient struct {
	grpc.ClientStream
}

func (x *gRPCChatterChatClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCChatterChatClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCChatterServer is the server API for GRPCChatter service.
// All implementations should embed UnimplementedGRPCChatterServer
// for forward compatibility
type GRPCChatterServer interface {
	Chat(GRPCChatter_ChatServer) error
}

// UnimplementedGRPCChatterServer should be embedded to have forward compatible implementations.
type UnimplementedGRPCChatterServer struct {
}

func (UnimplementedGRPCChatterServer) Chat(GRPCChatter_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

// UnsafeGRPCChatterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCChatterServer will
// result in compilation errors.
type UnsafeGRPCChatterServer interface {
	mustEmbedUnimplementedGRPCChatterServer()
}

func RegisterGRPCChatterServer(s grpc.ServiceRegistrar, srv GRPCChatterServer) {
	s.RegisterService(&GRPCChatter_ServiceDesc, srv)
}

func _GRPCChatter_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCChatterServer).Chat(&gRPCChatterChatServer{stream})
}

type GRPCChatter_ChatServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type gRPCChatterChatServer struct {
	grpc.ServerStream
}

func (x *gRPCChatterChatServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCChatterChatServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCChatter_ServiceDesc is the grpc.ServiceDesc for GRPCChatter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCChatter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GRPCChatter",
	HandlerType: (*GRPCChatterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _GRPCChatter_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/grpcchatter.proto",
}
