// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.1
// source: proto/grpcchatter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GRPCChatter_CreateChatRoom_FullMethodName    = "/proto.GRPCChatter/CreateChatRoom"
	GRPCChatter_DeleteChatRoom_FullMethodName    = "/proto.GRPCChatter/DeleteChatRoom"
	GRPCChatter_JoinChatRoom_FullMethodName      = "/proto.GRPCChatter/JoinChatRoom"
	GRPCChatter_ListChatRoomUsers_FullMethodName = "/proto.GRPCChatter/ListChatRoomUsers"
	GRPCChatter_Chat_FullMethodName              = "/proto.GRPCChatter/Chat"
)

// GRPCChatterClient is the client API for GRPCChatter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCChatterClient interface {
	CreateChatRoom(ctx context.Context, in *CreateChatRoomRequest, opts ...grpc.CallOption) (*CreateChatRoomResponse, error)
	DeleteChatRoom(ctx context.Context, in *DeleteChatRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	JoinChatRoom(ctx context.Context, in *JoinChatRoomRequest, opts ...grpc.CallOption) (*JoinChatRoomResponse, error)
	ListChatRoomUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListChatRoomUsersResponse, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (GRPCChatter_ChatClient, error)
}

type gRPCChatterClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCChatterClient(cc grpc.ClientConnInterface) GRPCChatterClient {
	return &gRPCChatterClient{cc}
}

func (c *gRPCChatterClient) CreateChatRoom(ctx context.Context, in *CreateChatRoomRequest, opts ...grpc.CallOption) (*CreateChatRoomResponse, error) {
	out := new(CreateChatRoomResponse)
	err := c.cc.Invoke(ctx, GRPCChatter_CreateChatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCChatterClient) DeleteChatRoom(ctx context.Context, in *DeleteChatRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GRPCChatter_DeleteChatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCChatterClient) JoinChatRoom(ctx context.Context, in *JoinChatRoomRequest, opts ...grpc.CallOption) (*JoinChatRoomResponse, error) {
	out := new(JoinChatRoomResponse)
	err := c.cc.Invoke(ctx, GRPCChatter_JoinChatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCChatterClient) ListChatRoomUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListChatRoomUsersResponse, error) {
	out := new(ListChatRoomUsersResponse)
	err := c.cc.Invoke(ctx, GRPCChatter_ListChatRoomUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCChatterClient) Chat(ctx context.Context, opts ...grpc.CallOption) (GRPCChatter_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCChatter_ServiceDesc.Streams[0], GRPCChatter_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCChatterChatClient{stream}
	return x, nil
}

type GRPCChatter_ChatClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type gRPCChatterChatClient struct {
	grpc.ClientStream
}

func (x *gRPCChatterChatClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCChatterChatClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCChatterServer is the server API for GRPCChatter service.
// All implementations should embed UnimplementedGRPCChatterServer
// for forward compatibility
type GRPCChatterServer interface {
	CreateChatRoom(context.Context, *CreateChatRoomRequest) (*CreateChatRoomResponse, error)
	DeleteChatRoom(context.Context, *DeleteChatRoomRequest) (*emptypb.Empty, error)
	JoinChatRoom(context.Context, *JoinChatRoomRequest) (*JoinChatRoomResponse, error)
	ListChatRoomUsers(context.Context, *emptypb.Empty) (*ListChatRoomUsersResponse, error)
	Chat(GRPCChatter_ChatServer) error
}

// UnimplementedGRPCChatterServer should be embedded to have forward compatible implementations.
type UnimplementedGRPCChatterServer struct {
}

func (UnimplementedGRPCChatterServer) CreateChatRoom(context.Context, *CreateChatRoomRequest) (*CreateChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRoom not implemented")
}
func (UnimplementedGRPCChatterServer) DeleteChatRoom(context.Context, *DeleteChatRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatRoom not implemented")
}
func (UnimplementedGRPCChatterServer) JoinChatRoom(context.Context, *JoinChatRoomRequest) (*JoinChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChatRoom not implemented")
}
func (UnimplementedGRPCChatterServer) ListChatRoomUsers(context.Context, *emptypb.Empty) (*ListChatRoomUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChatRoomUsers not implemented")
}
func (UnimplementedGRPCChatterServer) Chat(GRPCChatter_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

// UnsafeGRPCChatterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCChatterServer will
// result in compilation errors.
type UnsafeGRPCChatterServer interface {
	mustEmbedUnimplementedGRPCChatterServer()
}

func RegisterGRPCChatterServer(s grpc.ServiceRegistrar, srv GRPCChatterServer) {
	s.RegisterService(&GRPCChatter_ServiceDesc, srv)
}

func _GRPCChatter_CreateChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCChatterServer).CreateChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCChatter_CreateChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCChatterServer).CreateChatRoom(ctx, req.(*CreateChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCChatter_DeleteChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCChatterServer).DeleteChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCChatter_DeleteChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCChatterServer).DeleteChatRoom(ctx, req.(*DeleteChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCChatter_JoinChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCChatterServer).JoinChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCChatter_JoinChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCChatterServer).JoinChatRoom(ctx, req.(*JoinChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCChatter_ListChatRoomUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCChatterServer).ListChatRoomUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCChatter_ListChatRoomUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCChatterServer).ListChatRoomUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCChatter_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCChatterServer).Chat(&gRPCChatterChatServer{stream})
}

type GRPCChatter_ChatServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type gRPCChatterChatServer struct {
	grpc.ServerStream
}

func (x *gRPCChatterChatServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCChatterChatServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCChatter_ServiceDesc is the grpc.ServiceDesc for GRPCChatter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCChatter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GRPCChatter",
	HandlerType: (*GRPCChatterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatRoom",
			Handler:    _GRPCChatter_CreateChatRoom_Handler,
		},
		{
			MethodName: "DeleteChatRoom",
			Handler:    _GRPCChatter_DeleteChatRoom_Handler,
		},
		{
			MethodName: "JoinChatRoom",
			Handler:    _GRPCChatter_JoinChatRoom_Handler,
		},
		{
			MethodName: "ListChatRoomUsers",
			Handler:    _GRPCChatter_ListChatRoomUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _GRPCChatter_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/grpcchatter.proto",
}
